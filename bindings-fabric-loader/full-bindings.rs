// WARNING:  This file was autogenerated by java-spaghetti.  Any changes to this file may be lost!!!
#![allow(unused_imports)]
#![allow(non_camel_case_types)] // We map Java inner classes to Outer_Inner
#![allow(dead_code)] // We generate structs for private Java types too, just in case.
#![allow(deprecated)] // We're generating deprecated types/methods
#![allow(non_upper_case_globals)] // We might be generating Java style fields/methods
#![allow(non_snake_case)] // We might be generating Java style fields/methods
#![allow(clippy::all)] // we don't ensure generated bindings are clippy-compliant at all.
#![allow(unsafe_code)] // play nice if user has `deny(unsafe_code)` in their crate.

mod util {
    use super::java::lang::{String as JString, Throwable};
    use java_spaghetti::{Env, JavaDebug, Local, Ref, StringChars, ThrowableType, sys::jsize};
    use std::{char::DecodeUtf16Error, fmt};

    impl JavaDebug for Throwable {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            writeln!(f, "java::lang::Throwable")?;

            match self.getMessage() {
                Ok(Some(message)) => writeln!(f, "    getMessage:            {:?}", message)?,
                Ok(None) => writeln!(f, "    getMessage:            N/A (returned null)")?,
                Err(_) => writeln!(f, "    getMessage:            N/A (threw an exception!)")?,
            }

            match self.getLocalizedMessage() {
                Ok(Some(message)) => writeln!(f, "    getLocalizedMessage:   {:?}", message)?,
                Ok(None) => writeln!(f, "    getLocalizedMessage:   N/A (returned null)")?,
                Err(_) => writeln!(f, "    getLocalizedMessage:   N/A (threw an exception!)")?,
            }

            match self.getStackTrace() {
                Err(_) => writeln!(f, "    getStackTrace:         N/A (threw an exception!)")?,
                Ok(None) => writeln!(f, "    getStackTrace:         N/A (returned null)")?,
                Ok(Some(stack_trace)) => {
                    writeln!(f, "    getStackTrace:")?;
                    for frame in stack_trace.iter() {
                        match frame {
                            None => writeln!(f, "        N/A (frame was null)")?,
                            Some(frame) => {
                                let file_line = match (frame.getFileName(), frame.getLineNumber()) {
                                    (Ok(Some(file)), Ok(line)) => {
                                        format!("{}({}):", file.to_string_lossy(), line)
                                    }
                                    (Ok(Some(file)), _) => format!("{}:", file.to_string_lossy()),
                                    (_, _) => "N/A (getFileName threw an exception or returned null)".to_owned(),
                                };

                                let class_method = match (frame.getClassName(), frame.getMethodName()) {
                                    (Ok(Some(class)), Ok(Some(method))) => {
                                        format!("{}.{}", class.to_string_lossy(), method.to_string_lossy())
                                    }
                                    (Ok(Some(class)), _) => class.to_string_lossy(),
                                    (_, Ok(Some(method))) => method.to_string_lossy(),
                                    (_, _) => {
                                        "N/A (getClassName + getMethodName threw exceptions or returned null)".to_owned()
                                    }
                                };

                                writeln!(f, "        {:120}{}", file_line, class_method)?;
                            }
                        }
                    }
                }
            }

            // Consider also dumping:
            // API level 1+:
            //      getCause()
            // API level 19+:
            //      getSuppressed()

            Ok(())
        }
    }

    impl JString {
        /// Create new local string from an Env + AsRef<str>
        pub fn from_env_str<'env, S: AsRef<str>>(env: Env<'env>, string: S) -> Local<'env, Self> {
            let chars = string.as_ref().encode_utf16().collect::<Vec<_>>();

            let string = unsafe { env.new_string(chars.as_ptr(), chars.len() as jsize) };
            unsafe { Local::from_raw(env, string) }
        }

        fn string_chars<'env>(self: &Ref<'env, Self>) -> StringChars<'env> {
            unsafe { StringChars::from_env_jstring(self.env(), self.as_raw()) }
        }

        /// Returns a new [Ok]\([String]\), or an [Err]\([DecodeUtf16Error]\) if if it contained any invalid UTF16.
        ///
        /// [Ok]:                       https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok
        /// [Err]:                      https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err
        /// [DecodeUtf16Error]:         https://doc.rust-lang.org/std/char/struct.DecodeUtf16Error.html
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string(self: &Ref<'_, Self>) -> Result<String, DecodeUtf16Error> {
            self.string_chars().to_string()
        }

        /// Returns a new [String] with any invalid UTF16 characters replaced with [REPLACEMENT_CHARACTER]s (`'\u{FFFD}'`.)
        ///
        /// [String]:                   https://doc.rust-lang.org/std/string/struct.String.html
        /// [REPLACEMENT_CHARACTER]:    https://doc.rust-lang.org/std/char/constant.REPLACEMENT_CHARACTER.html
        pub fn to_string_lossy(self: &Ref<'_, Self>) -> String {
            self.string_chars().to_string_lossy()
        }
    }

    // OsString doesn't implement Display, so neither does java::lang::String.
    impl JavaDebug for JString {
        fn fmt(self: &Ref<'_, Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Debug::fmt(&self.to_string_lossy(), f) // XXX: Unneccessary alloc?  Shouldn't use lossy here?
        }
    }

    impl ThrowableType for Throwable {}
}

pub mod net {

    pub mod fabricmc {

        pub mod api {
            #[doc = "interface [ClientModInitializer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/ClientModInitializer.html)"]
            pub enum ClientModInitializer {}
            unsafe impl ::java_spaghetti::ReferenceType for ClientModInitializer {}
            unsafe impl ::java_spaghetti::JniType for ClientModInitializer {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/ClientModInitializer")
                }
            }
            impl ClientModInitializer {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/ClientModInitializer"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[onInitializeClient](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/ClientModInitializer.html#onInitializeClient())"]
                pub fn onInitializeClient<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onInitializeClient",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "interface [DedicatedServerModInitializer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/DedicatedServerModInitializer.html)"]
            pub enum DedicatedServerModInitializer {}
            unsafe impl ::java_spaghetti::ReferenceType for DedicatedServerModInitializer {}
            unsafe impl ::java_spaghetti::JniType for DedicatedServerModInitializer {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/DedicatedServerModInitializer")
                }
            }
            impl DedicatedServerModInitializer {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/DedicatedServerModInitializer"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[onInitializeServer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/DedicatedServerModInitializer.html#onInitializeServer())"]
                pub fn onInitializeServer<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onInitializeServer",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "enum [EnvType](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvType.html)"]
            pub enum EnvType {}
            unsafe impl ::java_spaghetti::ReferenceType for EnvType {}
            unsafe impl ::java_spaghetti::JniType for EnvType {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/EnvType")
                }
            }
            impl EnvType {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/EnvType"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvType.html#values())"]
                pub fn values<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::result::Result<
                    ::std::option::Option<
                        ::java_spaghetti::Local<
                            'env,
                            ::java_spaghetti::ObjectArray<EnvType, super::super::super::java::lang::Throwable>,
                        >,
                    >,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                    __jni_class,
                                    c"values",
                                    c"()[Lnet/fabricmc/api/EnvType;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                    }
                }
                #[doc = "**get** public static final [CLIENT](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvType.html#CLIENT)"]
                pub fn CLIENT<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::option::Option<::java_spaghetti::Local<'env, EnvType>> {
                    static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    unsafe {
                        let __jni_field = __FIELD
                            .get_or_init(|| {
                                ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                    __jni_class,
                                    c"CLIENT",
                                    c"Lnet/fabricmc/api/EnvType;",
                                ))
                            })
                            .as_raw();
                        __jni_env.get_static_object_field(__jni_class, __jni_field)
                    }
                }
                #[doc = "**get** public static final [SERVER](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvType.html#SERVER)"]
                pub fn SERVER<'env>(
                    __jni_env: ::java_spaghetti::Env<'env>,
                ) -> ::std::option::Option<::java_spaghetti::Local<'env, EnvType>> {
                    static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                    let __jni_class = Self::__class_global_ref(__jni_env);
                    unsafe {
                        let __jni_field = __FIELD
                            .get_or_init(|| {
                                ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                    __jni_class,
                                    c"SERVER",
                                    c"Lnet/fabricmc/api/EnvType;",
                                ))
                            })
                            .as_raw();
                        __jni_env.get_static_object_field(__jni_class, __jni_field)
                    }
                }
            }
            #[doc = "interface [Environment](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/Environment.html)"]
            pub enum Environment {}
            unsafe impl ::java_spaghetti::ReferenceType for Environment {}
            unsafe impl ::java_spaghetti::JniType for Environment {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/Environment")
                }
            }
            impl Environment {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/Environment"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[value](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/Environment.html#value())"]
                pub fn value<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, EnvType>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"value",
                                    c"()Lnet/fabricmc/api/EnvType;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "interface [EnvironmentInterface](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvironmentInterface.html)"]
            pub enum EnvironmentInterface {}
            unsafe impl ::java_spaghetti::ReferenceType for EnvironmentInterface {}
            unsafe impl ::java_spaghetti::JniType for EnvironmentInterface {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/EnvironmentInterface")
                }
            }
            impl EnvironmentInterface {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/EnvironmentInterface"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[value](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvironmentInterface.html#value())"]
                pub fn value<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<::java_spaghetti::Local<'env, EnvType>>,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"value",
                                    c"()Lnet/fabricmc/api/EnvType;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "interface [EnvironmentInterfaces](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvironmentInterfaces.html)"]
            pub enum EnvironmentInterfaces {}
            unsafe impl ::java_spaghetti::ReferenceType for EnvironmentInterfaces {}
            unsafe impl ::java_spaghetti::JniType for EnvironmentInterfaces {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/EnvironmentInterfaces")
                }
            }
            impl EnvironmentInterfaces {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/EnvironmentInterfaces"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[value](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/EnvironmentInterfaces.html#value())"]
                pub fn value<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<
                    ::std::option::Option<
                        ::java_spaghetti::Local<
                            'env,
                            ::java_spaghetti::ObjectArray<EnvironmentInterface, super::super::super::java::lang::Throwable>,
                        >,
                    >,
                    ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>,
                > {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"value",
                                    c"()[Lnet/fabricmc/api/EnvironmentInterface;",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
            #[doc = "interface [ModInitializer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/ModInitializer.html)"]
            pub enum ModInitializer {}
            unsafe impl ::java_spaghetti::ReferenceType for ModInitializer {}
            unsafe impl ::java_spaghetti::JniType for ModInitializer {
                fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                    callback(c"net/fabricmc/api/ModInitializer")
                }
            }
            impl ModInitializer {
                fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                    static __CLASS: ::std::sync::OnceLock<
                        ::java_spaghetti::Global<super::super::super::java::lang::Object>,
                    > = ::std::sync::OnceLock::new();
                    __CLASS
                        .get_or_init(|| unsafe {
                            ::java_spaghetti::Local::from_raw(
                                __jni_env,
                                __jni_env.require_class(c"net/fabricmc/api/ModInitializer"),
                            )
                            .as_global()
                        })
                        .as_raw()
                }
                #[doc = "[onInitialize](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/api/ModInitializer.html#onInitialize())"]
                pub fn onInitialize<'env>(
                    self: &::java_spaghetti::Ref<'env, Self>,
                ) -> ::std::result::Result<(), ::java_spaghetti::Local<'env, super::super::super::java::lang::Throwable>>
                {
                    static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                    unsafe {
                        let __jni_args = [];
                        let __jni_env = self.env();
                        let __jni_class = Self::__class_global_ref(__jni_env);
                        let __jni_method = __METHOD
                            .get_or_init(|| {
                                ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                    __jni_class,
                                    c"onInitialize",
                                    c"()V",
                                ))
                            })
                            .as_raw();
                        __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                    }
                }
            }
        }

        pub mod loader {

            pub mod api {

                pub mod entrypoint {
                    #[doc = "interface [EntrypointContainer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/entrypoint/EntrypointContainer.html)"]
                    pub enum EntrypointContainer {}
                    unsafe impl ::java_spaghetti::ReferenceType for EntrypointContainer {}
                    unsafe impl ::java_spaghetti::JniType for EntrypointContainer {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/entrypoint/EntrypointContainer")
                        }
                    }
                    impl EntrypointContainer {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/entrypoint/EntrypointContainer"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getProvider](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/entrypoint/EntrypointContainer.html#getProvider())"]
                        pub fn getProvider<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, super::ModContainer>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getProvider",
                                            c"()Lnet/fabricmc/loader/api/ModContainer;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "interface [PreLaunchEntrypoint](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/entrypoint/PreLaunchEntrypoint.html)"]
                    pub enum PreLaunchEntrypoint {}
                    unsafe impl ::java_spaghetti::ReferenceType for PreLaunchEntrypoint {}
                    unsafe impl ::java_spaghetti::JniType for PreLaunchEntrypoint {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/entrypoint/PreLaunchEntrypoint")
                        }
                    }
                    impl PreLaunchEntrypoint {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/entrypoint/PreLaunchEntrypoint"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[onPreLaunch](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/entrypoint/PreLaunchEntrypoint.html#onPreLaunch())"]
                        pub fn onPreLaunch<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            (),
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"onPreLaunch",
                                            c"()V",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_void_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                }

                pub mod metadata {

                    pub mod version {
                        #[doc = "enum [VersionComparisonOperator](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html)"]
                        pub enum VersionComparisonOperator {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator")
                            }
                        }
                        impl VersionComparisonOperator {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#values())"]
                            pub fn values<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<
                                    ::java_spaghetti::Local<
                                        'env,
                                        ::java_spaghetti::ObjectArray<
                                            VersionComparisonOperator,
                                            super::super::super::super::super::super::java::lang::Throwable,
                                        >,
                                    >,
                                >,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                                __jni_class,
                                                c"values",
                                                c"()[Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[isMinInclusive](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#isMinInclusive())"]
                            pub fn isMinInclusive<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"isMinInclusive",
                                                c"()Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[isMaxInclusive](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#isMaxInclusive())"]
                            pub fn isMaxInclusive<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"isMaxInclusive",
                                                c"()Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#test(net.fabricmc.loader.api.Version,net.fabricmc.loader.api.Version))"]
                            pub fn test_Version_Version<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::Version>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::Version>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"test",
                                                c"(Lnet/fabricmc/loader/api/Version;Lnet/fabricmc/loader/api/Version;)Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test_SemanticVersion_SemanticVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "**get** public static final [GREATER_EQUAL](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#GREATER_EQUAL)"]
                            pub fn GREATER_EQUAL<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"GREATER_EQUAL",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [LESS_EQUAL](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#LESS_EQUAL)"]
                            pub fn LESS_EQUAL<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"LESS_EQUAL",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [GREATER](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#GREATER)"]
                            pub fn GREATER<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"GREATER",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [LESS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#LESS)"]
                            pub fn LESS<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"LESS",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [EQUAL](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#EQUAL)"]
                            pub fn EQUAL<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"EQUAL",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [SAME_TO_NEXT_MINOR](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#SAME_TO_NEXT_MINOR)"]
                            pub fn SAME_TO_NEXT_MINOR<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"SAME_TO_NEXT_MINOR",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                            #[doc = "**get** public static final [SAME_TO_NEXT_MAJOR](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.html#SAME_TO_NEXT_MAJOR)"]
                            pub fn SAME_TO_NEXT_MAJOR<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"SAME_TO_NEXT_MAJOR",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.1](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.1.html)"]
                        enum VersionComparisonOperator__1 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__1 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__1 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$1")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__1 {}
                        impl VersionComparisonOperator__1 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$1",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.1.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.1.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.2](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.2.html)"]
                        enum VersionComparisonOperator__2 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__2 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__2 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$2")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__2 {}
                        impl VersionComparisonOperator__2 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$2",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.2.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.2.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.3](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.3.html)"]
                        enum VersionComparisonOperator__3 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__3 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__3 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$3")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__3 {}
                        impl VersionComparisonOperator__3 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$3",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.3.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.3.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.4](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.4.html)"]
                        enum VersionComparisonOperator__4 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__4 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__4 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$4")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__4 {}
                        impl VersionComparisonOperator__4 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$4",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.4.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.4.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.5](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.5.html)"]
                        enum VersionComparisonOperator__5 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__5 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__5 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$5")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__5 {}
                        impl VersionComparisonOperator__5 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$5",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.5.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.5.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.5.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.6](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.6.html)"]
                        enum VersionComparisonOperator__6 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__6 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__6 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$6")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__6 {}
                        impl VersionComparisonOperator__6 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$6",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.6.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.6.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.6.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "enum [VersionComparisonOperator.7](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.7.html)"]
                        enum VersionComparisonOperator__7 {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionComparisonOperator__7 {}
                        unsafe impl ::java_spaghetti::JniType for VersionComparisonOperator__7 {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$7")
                            }
                        }
                        unsafe impl ::java_spaghetti::AssignableTo<VersionComparisonOperator> for VersionComparisonOperator__7 {}
                        impl VersionComparisonOperator__7 {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionComparisonOperator$7",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[test](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.7.html#test(net.fabricmc.loader.api.SemanticVersion,net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn test<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                                arg1: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"test" , c"(Lnet/fabricmc/loader/api/SemanticVersion;Lnet/fabricmc/loader/api/SemanticVersion;)Z" ))). as_raw ();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[minVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.7.html#minVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn minVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"minVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[maxVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionComparisonOperator.7.html#maxVersion(net.fabricmc.loader.api.SemanticVersion))"]
                            pub fn maxVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<super::super::SemanticVersion>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::SemanticVersion>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"maxVersion" , c"(Lnet/fabricmc/loader/api/SemanticVersion;)Lnet/fabricmc/loader/api/SemanticVersion;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "interface [VersionInterval](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html)"]
                        pub enum VersionInterval {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionInterval {}
                        unsafe impl ::java_spaghetti::JniType for VersionInterval {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionInterval")
                            }
                        }
                        impl VersionInterval {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env
                                                .require_class(c"net/fabricmc/loader/api/metadata/version/VersionInterval"),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[isSemantic](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#isSemantic())"]
                            pub fn isSemantic<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"isSemantic",
                                                c"()Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[getMin](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#getMin())"]
                            pub fn getMin<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::Version>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"getMin",
                                                c"()Lnet/fabricmc/loader/api/Version;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[isMinInclusive](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#isMinInclusive())"]
                            pub fn isMinInclusive<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"isMinInclusive",
                                                c"()Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[getMax](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#getMax())"]
                            pub fn getMax<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::Version>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"getMax",
                                                c"()Lnet/fabricmc/loader/api/Version;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[isMaxInclusive](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#isMaxInclusive())"]
                            pub fn isMaxInclusive<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                bool,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"isMaxInclusive",
                                                c"()Z",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[and](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#and(net.fabricmc.loader.api.metadata.version.VersionInterval))"]
                            pub fn and_VersionInterval<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                                arg0: impl ::java_spaghetti::AsArg<VersionInterval>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, VersionInterval>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_method (__jni_class , c"and" , c"(Lnet/fabricmc/loader/api/metadata/version/VersionInterval;)Lnet/fabricmc/loader/api/metadata/version/VersionInterval;" ))). as_raw ();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[and](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#and(net.fabricmc.loader.api.metadata.version.VersionInterval,net.fabricmc.loader.api.metadata.version.VersionInterval))"]
                            pub fn and_VersionInterval_VersionInterval<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                                arg0: impl ::java_spaghetti::AsArg<VersionInterval>,
                                arg1: impl ::java_spaghetti::AsArg<VersionInterval>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, VersionInterval>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg0),
                                        ::java_spaghetti::AsJValue::as_jvalue(&arg1),
                                    ];
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD . get_or_init (|| :: java_spaghetti :: JMethodID :: from_raw (__jni_env . require_static_method (__jni_class , c"and" , c"(Lnet/fabricmc/loader/api/metadata/version/VersionInterval;Lnet/fabricmc/loader/api/metadata/version/VersionInterval;)Lnet/fabricmc/loader/api/metadata/version/VersionInterval;" ))). as_raw ();
                                    __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "**get** public static final [INFINITE](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionInterval.html#INFINITE)"]
                            pub fn INFINITE<'env>(
                                __jni_env: ::java_spaghetti::Env<'env>,
                            ) -> ::std::option::Option<::java_spaghetti::Local<'env, VersionInterval>>
                            {
                                static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> =
                                    ::std::sync::OnceLock::new();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                unsafe {
                                    let __jni_field = __FIELD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                                __jni_class,
                                                c"INFINITE",
                                                c"Lnet/fabricmc/loader/api/metadata/version/VersionInterval;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.get_static_object_field(__jni_class, __jni_field)
                                }
                            }
                        }
                        #[doc = "interface [VersionPredicate](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionPredicate.html)"]
                        pub enum VersionPredicate {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionPredicate {}
                        unsafe impl ::java_spaghetti::JniType for VersionPredicate {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionPredicate")
                            }
                        }
                        impl VersionPredicate {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env
                                                .require_class(c"net/fabricmc/loader/api/metadata/version/VersionPredicate"),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[getInterval](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionPredicate.html#getInterval())"]
                            pub fn getInterval<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, VersionInterval>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"getInterval",
                                                c"()Lnet/fabricmc/loader/api/metadata/version/VersionInterval;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                        #[doc = "interface [VersionPredicate.PredicateTerm](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionPredicate.PredicateTerm.html)"]
                        pub enum VersionPredicate_PredicateTerm {}
                        unsafe impl ::java_spaghetti::ReferenceType for VersionPredicate_PredicateTerm {}
                        unsafe impl ::java_spaghetti::JniType for VersionPredicate_PredicateTerm {
                            fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                                callback(c"net/fabricmc/loader/api/metadata/version/VersionPredicate$PredicateTerm")
                            }
                        }
                        impl VersionPredicate_PredicateTerm {
                            fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                                static __CLASS: ::std::sync::OnceLock<
                                    ::java_spaghetti::Global<super::super::super::super::super::super::java::lang::Object>,
                                > = ::std::sync::OnceLock::new();
                                __CLASS
                                    .get_or_init(|| unsafe {
                                        ::java_spaghetti::Local::from_raw(
                                            __jni_env,
                                            __jni_env.require_class(
                                                c"net/fabricmc/loader/api/metadata/version/VersionPredicate$PredicateTerm",
                                            ),
                                        )
                                        .as_global()
                                    })
                                    .as_raw()
                            }
                            #[doc = "[getOperator](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionPredicate.PredicateTerm.html#getOperator())"]
                            pub fn getOperator<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, VersionComparisonOperator>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"getOperator",
                                                c"()Lnet/fabricmc/loader/api/metadata/version/VersionComparisonOperator;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                            #[doc = "[getReferenceVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/version/VersionPredicate.PredicateTerm.html#getReferenceVersion())"]
                            pub fn getReferenceVersion<'env>(
                                self: &::java_spaghetti::Ref<'env, Self>,
                            ) -> ::std::result::Result<
                                ::std::option::Option<::java_spaghetti::Local<'env, super::super::Version>>,
                                ::java_spaghetti::Local<
                                    'env,
                                    super::super::super::super::super::super::java::lang::Throwable,
                                >,
                            > {
                                static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                    ::std::sync::OnceLock::new();
                                unsafe {
                                    let __jni_args = [];
                                    let __jni_env = self.env();
                                    let __jni_class = Self::__class_global_ref(__jni_env);
                                    let __jni_method = __METHOD
                                        .get_or_init(|| {
                                            ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                                __jni_class,
                                                c"getReferenceVersion",
                                                c"()Lnet/fabricmc/loader/api/Version;",
                                            ))
                                        })
                                        .as_raw();
                                    __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                                }
                            }
                        }
                    }
                    #[doc = "interface [ContactInformation](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ContactInformation.html)"]
                    pub enum ContactInformation {}
                    unsafe impl ::java_spaghetti::ReferenceType for ContactInformation {}
                    unsafe impl ::java_spaghetti::JniType for ContactInformation {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ContactInformation")
                        }
                    }
                    impl ContactInformation {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ContactInformation"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "**get** public static final [EMPTY](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ContactInformation.html#EMPTY)"]
                        pub fn EMPTY<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ContactInformation>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"EMPTY",
                                            c"Lnet/fabricmc/loader/api/metadata/ContactInformation;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                    }
                    #[doc = "class [ContactInformation.1](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ContactInformation.1.html)"]
                    enum ContactInformation__1 {}
                    unsafe impl ::java_spaghetti::ReferenceType for ContactInformation__1 {}
                    unsafe impl ::java_spaghetti::JniType for ContactInformation__1 {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ContactInformation$1")
                        }
                    }
                    unsafe impl ::java_spaghetti::AssignableTo<ContactInformation> for ContactInformation__1 {}
                    impl ContactInformation__1 {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ContactInformation$1"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                    }
                    #[doc = "interface [CustomValue](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.html)"]
                    pub enum CustomValue {}
                    unsafe impl ::java_spaghetti::ReferenceType for CustomValue {}
                    unsafe impl ::java_spaghetti::JniType for CustomValue {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/CustomValue")
                        }
                    }
                    impl CustomValue {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/CustomValue"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getType](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.html#getType())"]
                        pub fn getType<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getType",
                                            c"()Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[getAsObject](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.html#getAsObject())"]
                        pub fn getAsObject<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvObject>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getAsObject",
                                            c"()Lnet/fabricmc/loader/api/metadata/CustomValue$CvObject;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[getAsArray](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.html#getAsArray())"]
                        pub fn getAsArray<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvArray>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getAsArray",
                                            c"()Lnet/fabricmc/loader/api/metadata/CustomValue$CvArray;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[getAsBoolean](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.html#getAsBoolean())"]
                        pub fn getAsBoolean<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            bool,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getAsBoolean",
                                            c"()Z",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "interface [CustomValue.CvArray](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvArray.html)"]
                    pub enum CustomValue_CvArray {}
                    unsafe impl ::java_spaghetti::ReferenceType for CustomValue_CvArray {}
                    unsafe impl ::java_spaghetti::JniType for CustomValue_CvArray {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/CustomValue$CvArray")
                        }
                    }
                    unsafe impl ::java_spaghetti::AssignableTo<CustomValue> for CustomValue_CvArray {}
                    impl CustomValue_CvArray {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/CustomValue$CvArray"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[size](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvArray.html#size())"]
                        pub fn size<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            i32,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"size",
                                            c"()I",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[get](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvArray.html#get(int))"]
                        pub fn get<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                            arg0: i32,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, CustomValue>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"get",
                                            c"(I)Lnet/fabricmc/loader/api/metadata/CustomValue;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "interface [CustomValue.CvObject](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvObject.html)"]
                    pub enum CustomValue_CvObject {}
                    unsafe impl ::java_spaghetti::ReferenceType for CustomValue_CvObject {}
                    unsafe impl ::java_spaghetti::JniType for CustomValue_CvObject {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/CustomValue$CvObject")
                        }
                    }
                    unsafe impl ::java_spaghetti::AssignableTo<CustomValue> for CustomValue_CvObject {}
                    impl CustomValue_CvObject {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/CustomValue$CvObject"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[size](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvObject.html#size())"]
                        pub fn size<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            i32,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"size",
                                            c"()I",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "enum [CustomValue.CvType](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html)"]
                    pub enum CustomValue_CvType {}
                    unsafe impl ::java_spaghetti::ReferenceType for CustomValue_CvType {}
                    unsafe impl ::java_spaghetti::JniType for CustomValue_CvType {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/CustomValue$CvType")
                        }
                    }
                    impl CustomValue_CvType {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/CustomValue$CvType"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#values())"]
                        pub fn values<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<
                                ::java_spaghetti::Local<
                                    'env,
                                    ::java_spaghetti::ObjectArray<
                                        CustomValue_CvType,
                                        super::super::super::super::super::java::lang::Throwable,
                                    >,
                                >,
                            >,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                            __jni_class,
                                            c"values",
                                            c"()[Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "**get** public static final [OBJECT](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#OBJECT)"]
                        pub fn OBJECT<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"OBJECT",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [ARRAY](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#ARRAY)"]
                        pub fn ARRAY<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"ARRAY",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [STRING](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#STRING)"]
                        pub fn STRING<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"STRING",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [NUMBER](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#NUMBER)"]
                        pub fn NUMBER<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"NUMBER",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [BOOLEAN](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#BOOLEAN)"]
                        pub fn BOOLEAN<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"BOOLEAN",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [NULL](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/CustomValue.CvType.html#NULL)"]
                        pub fn NULL<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, CustomValue_CvType>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"NULL",
                                            c"Lnet/fabricmc/loader/api/metadata/CustomValue$CvType;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                    }
                    #[doc = "interface [ModDependency](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.html)"]
                    pub enum ModDependency {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModDependency {}
                    unsafe impl ::java_spaghetti::JniType for ModDependency {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModDependency")
                        }
                    }
                    impl ModDependency {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModDependency"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getKind](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.html#getKind())"]
                        pub fn getKind<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getKind",
                                            c"()Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[matches](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.html#matches(net.fabricmc.loader.api.Version))"]
                        pub fn matches<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                            arg0: impl ::java_spaghetti::AsArg<super::Version>,
                        ) -> ::std::result::Result<
                            bool,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"matches",
                                            c"(Lnet/fabricmc/loader/api/Version;)Z",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "enum [ModDependency.Kind](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html)"]
                    pub enum ModDependency_Kind {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModDependency_Kind {}
                    unsafe impl ::java_spaghetti::JniType for ModDependency_Kind {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModDependency$Kind")
                        }
                    }
                    impl ModDependency_Kind {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModDependency$Kind"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#values())"]
                        pub fn values<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<
                                ::java_spaghetti::Local<
                                    'env,
                                    ::java_spaghetti::ObjectArray<
                                        ModDependency_Kind,
                                        super::super::super::super::super::java::lang::Throwable,
                                    >,
                                >,
                            >,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                            __jni_class,
                                            c"values",
                                            c"()[Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[isPositive](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#isPositive())"]
                        pub fn isPositive<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            bool,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"isPositive",
                                            c"()Z",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[isSoft](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#isSoft())"]
                        pub fn isSoft<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            bool,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"isSoft",
                                            c"()Z",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "**get** public static final [DEPENDS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#DEPENDS)"]
                        pub fn DEPENDS<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"DEPENDS",
                                            c"Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [RECOMMENDS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#RECOMMENDS)"]
                        pub fn RECOMMENDS<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"RECOMMENDS",
                                            c"Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [SUGGESTS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#SUGGESTS)"]
                        pub fn SUGGESTS<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"SUGGESTS",
                                            c"Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [CONFLICTS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#CONFLICTS)"]
                        pub fn CONFLICTS<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"CONFLICTS",
                                            c"Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [BREAKS](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModDependency.Kind.html#BREAKS)"]
                        pub fn BREAKS<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModDependency_Kind>>
                        {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"BREAKS",
                                            c"Lnet/fabricmc/loader/api/metadata/ModDependency$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                    }
                    #[doc = "enum [ModEnvironment](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html)"]
                    pub enum ModEnvironment {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModEnvironment {}
                    unsafe impl ::java_spaghetti::JniType for ModEnvironment {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModEnvironment")
                        }
                    }
                    impl ModEnvironment {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModEnvironment"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html#values())"]
                        pub fn values<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<
                                ::java_spaghetti::Local<
                                    'env,
                                    ::java_spaghetti::ObjectArray<
                                        ModEnvironment,
                                        super::super::super::super::super::java::lang::Throwable,
                                    >,
                                >,
                            >,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                            __jni_class,
                                            c"values",
                                            c"()[Lnet/fabricmc/loader/api/metadata/ModEnvironment;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[matches](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html#matches(net.fabricmc.api.EnvType))"]
                        pub fn matches<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                            arg0: impl ::java_spaghetti::AsArg<super::super::super::api::EnvType>,
                        ) -> ::std::result::Result<
                            bool,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"matches",
                                            c"(Lnet/fabricmc/api/EnvType;)Z",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "**get** public static final [CLIENT](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html#CLIENT)"]
                        pub fn CLIENT<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModEnvironment>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"CLIENT",
                                            c"Lnet/fabricmc/loader/api/metadata/ModEnvironment;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [SERVER](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html#SERVER)"]
                        pub fn SERVER<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModEnvironment>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"SERVER",
                                            c"Lnet/fabricmc/loader/api/metadata/ModEnvironment;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [UNIVERSAL](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModEnvironment.html#UNIVERSAL)"]
                        pub fn UNIVERSAL<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModEnvironment>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"UNIVERSAL",
                                            c"Lnet/fabricmc/loader/api/metadata/ModEnvironment;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                    }
                    #[doc = "interface [ModMetadata](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModMetadata.html)"]
                    pub enum ModMetadata {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModMetadata {}
                    unsafe impl ::java_spaghetti::JniType for ModMetadata {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModMetadata")
                        }
                    }
                    impl ModMetadata {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModMetadata"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModMetadata.html#getVersion())"]
                        pub fn getVersion<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, super::Version>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getVersion",
                                            c"()Lnet/fabricmc/loader/api/Version;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[getEnvironment](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModMetadata.html#getEnvironment())"]
                        pub fn getEnvironment<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, ModEnvironment>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getEnvironment",
                                            c"()Lnet/fabricmc/loader/api/metadata/ModEnvironment;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "[getContact](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModMetadata.html#getContact())"]
                        pub fn getContact<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, ContactInformation>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getContact",
                                            c"()Lnet/fabricmc/loader/api/metadata/ContactInformation;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "interface [ModOrigin](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.html)"]
                    pub enum ModOrigin {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModOrigin {}
                    unsafe impl ::java_spaghetti::JniType for ModOrigin {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModOrigin")
                        }
                    }
                    impl ModOrigin {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModOrigin"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getKind](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.html#getKind())"]
                        pub fn getKind<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, ModOrigin_Kind>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getKind",
                                            c"()Lnet/fabricmc/loader/api/metadata/ModOrigin$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                    #[doc = "enum [ModOrigin.Kind](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.Kind.html)"]
                    pub enum ModOrigin_Kind {}
                    unsafe impl ::java_spaghetti::ReferenceType for ModOrigin_Kind {}
                    unsafe impl ::java_spaghetti::JniType for ModOrigin_Kind {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/ModOrigin$Kind")
                        }
                    }
                    impl ModOrigin_Kind {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/ModOrigin$Kind"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[values](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.Kind.html#values())"]
                        pub fn values<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<
                                ::java_spaghetti::Local<
                                    'env,
                                    ::java_spaghetti::ObjectArray<
                                        ModOrigin_Kind,
                                        super::super::super::super::super::java::lang::Throwable,
                                    >,
                                >,
                            >,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                            __jni_class,
                                            c"values",
                                            c"()[Lnet/fabricmc/loader/api/metadata/ModOrigin$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                            }
                        }
                        #[doc = "**get** public static final [PATH](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.Kind.html#PATH)"]
                        pub fn PATH<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModOrigin_Kind>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"PATH",
                                            c"Lnet/fabricmc/loader/api/metadata/ModOrigin$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [NESTED](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.Kind.html#NESTED)"]
                        pub fn NESTED<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModOrigin_Kind>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"NESTED",
                                            c"Lnet/fabricmc/loader/api/metadata/ModOrigin$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                        #[doc = "**get** public static final [UNKNOWN](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/ModOrigin.Kind.html#UNKNOWN)"]
                        pub fn UNKNOWN<'env>(
                            __jni_env: ::java_spaghetti::Env<'env>,
                        ) -> ::std::option::Option<::java_spaghetti::Local<'env, ModOrigin_Kind>> {
                            static __FIELD: ::std::sync::OnceLock<::java_spaghetti::JFieldID> = ::std::sync::OnceLock::new();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            unsafe {
                                let __jni_field = __FIELD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JFieldID::from_raw(__jni_env.require_static_field(
                                            __jni_class,
                                            c"UNKNOWN",
                                            c"Lnet/fabricmc/loader/api/metadata/ModOrigin$Kind;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.get_static_object_field(__jni_class, __jni_field)
                            }
                        }
                    }
                    #[doc = "interface [Person](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/Person.html)"]
                    pub enum Person {}
                    unsafe impl ::java_spaghetti::ReferenceType for Person {}
                    unsafe impl ::java_spaghetti::JniType for Person {
                        fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                            callback(c"net/fabricmc/loader/api/metadata/Person")
                        }
                    }
                    impl Person {
                        fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                            static __CLASS: ::std::sync::OnceLock<
                                ::java_spaghetti::Global<super::super::super::super::super::java::lang::Object>,
                            > = ::std::sync::OnceLock::new();
                            __CLASS
                                .get_or_init(|| unsafe {
                                    ::java_spaghetti::Local::from_raw(
                                        __jni_env,
                                        __jni_env.require_class(c"net/fabricmc/loader/api/metadata/Person"),
                                    )
                                    .as_global()
                                })
                                .as_raw()
                        }
                        #[doc = "[getContact](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/metadata/Person.html#getContact())"]
                        pub fn getContact<'env>(
                            self: &::java_spaghetti::Ref<'env, Self>,
                        ) -> ::std::result::Result<
                            ::std::option::Option<::java_spaghetti::Local<'env, ContactInformation>>,
                            ::java_spaghetti::Local<'env, super::super::super::super::super::java::lang::Throwable>,
                        > {
                            static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> =
                                ::std::sync::OnceLock::new();
                            unsafe {
                                let __jni_args = [];
                                let __jni_env = self.env();
                                let __jni_class = Self::__class_global_ref(__jni_env);
                                let __jni_method = __METHOD
                                    .get_or_init(|| {
                                        ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                            __jni_class,
                                            c"getContact",
                                            c"()Lnet/fabricmc/loader/api/metadata/ContactInformation;",
                                        ))
                                    })
                                    .as_raw();
                                __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                            }
                        }
                    }
                }
                #[doc = "class [EntrypointException](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/EntrypointException.html)"]
                pub enum EntrypointException {}
                unsafe impl ::java_spaghetti::ReferenceType for EntrypointException {}
                unsafe impl ::java_spaghetti::JniType for EntrypointException {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/EntrypointException")
                    }
                }
                impl EntrypointException {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/EntrypointException"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                }
                #[doc = "interface [FabricLoader](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html)"]
                pub enum FabricLoader {}
                unsafe impl ::java_spaghetti::ReferenceType for FabricLoader {}
                unsafe impl ::java_spaghetti::JniType for FabricLoader {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/FabricLoader")
                    }
                }
                impl FabricLoader {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/FabricLoader"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                    #[doc = "[getInstance](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html#getInstance())"]
                    pub fn getInstance<'env>(
                        __jni_env: ::java_spaghetti::Env<'env>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, FabricLoader>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                        __jni_class,
                                        c"getInstance",
                                        c"()Lnet/fabricmc/loader/api/FabricLoader;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[getObjectShare](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html#getObjectShare())"]
                    pub fn getObjectShare<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, ObjectShare>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getObjectShare",
                                        c"()Lnet/fabricmc/loader/api/ObjectShare;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[getMappingResolver](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html#getMappingResolver())"]
                    pub fn getMappingResolver<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, MappingResolver>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getMappingResolver",
                                        c"()Lnet/fabricmc/loader/api/MappingResolver;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[isDevelopmentEnvironment](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html#isDevelopmentEnvironment())"]
                    pub fn isDevelopmentEnvironment<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        bool,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"isDevelopmentEnvironment",
                                        c"()Z",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[getEnvironmentType](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/FabricLoader.html#getEnvironmentType())"]
                    pub fn getEnvironmentType<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, super::super::api::EnvType>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getEnvironmentType",
                                        c"()Lnet/fabricmc/api/EnvType;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                }
                #[doc = "interface [LanguageAdapter](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/LanguageAdapter.html)"]
                pub enum LanguageAdapter {}
                unsafe impl ::java_spaghetti::ReferenceType for LanguageAdapter {}
                unsafe impl ::java_spaghetti::JniType for LanguageAdapter {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/LanguageAdapter")
                    }
                }
                impl LanguageAdapter {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/LanguageAdapter"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                    #[doc = "[getDefault](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/LanguageAdapter.html#getDefault())"]
                    pub fn getDefault<'env>(
                        __jni_env: ::java_spaghetti::Env<'env>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, LanguageAdapter>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_static_method(
                                        __jni_class,
                                        c"getDefault",
                                        c"()Lnet/fabricmc/loader/api/LanguageAdapter;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
                        }
                    }
                }
                #[doc = "class [LanguageAdapterException](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/LanguageAdapterException.html)"]
                pub enum LanguageAdapterException {}
                unsafe impl ::java_spaghetti::ReferenceType for LanguageAdapterException {}
                unsafe impl ::java_spaghetti::JniType for LanguageAdapterException {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/LanguageAdapterException")
                    }
                }
                impl LanguageAdapterException {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/LanguageAdapterException"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                }
                #[doc = "interface [MappingResolver](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/MappingResolver.html)"]
                pub enum MappingResolver {}
                unsafe impl ::java_spaghetti::ReferenceType for MappingResolver {}
                unsafe impl ::java_spaghetti::JniType for MappingResolver {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/MappingResolver")
                    }
                }
                impl MappingResolver {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/MappingResolver"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                }
                #[doc = "interface [ModContainer](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/ModContainer.html)"]
                pub enum ModContainer {}
                unsafe impl ::java_spaghetti::ReferenceType for ModContainer {}
                unsafe impl ::java_spaghetti::JniType for ModContainer {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/ModContainer")
                    }
                }
                impl ModContainer {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/ModContainer"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                    #[doc = "[getMetadata](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/ModContainer.html#getMetadata())"]
                    pub fn getMetadata<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, metadata::ModMetadata>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getMetadata",
                                        c"()Lnet/fabricmc/loader/api/metadata/ModMetadata;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[getOrigin](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/ModContainer.html#getOrigin())"]
                    pub fn getOrigin<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        ::std::option::Option<::java_spaghetti::Local<'env, metadata::ModOrigin>>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getOrigin",
                                        c"()Lnet/fabricmc/loader/api/metadata/ModOrigin;",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_object_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                }
                #[doc = "interface [ObjectShare](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/ObjectShare.html)"]
                pub enum ObjectShare {}
                unsafe impl ::java_spaghetti::ReferenceType for ObjectShare {}
                unsafe impl ::java_spaghetti::JniType for ObjectShare {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/ObjectShare")
                    }
                }
                impl ObjectShare {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/ObjectShare"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                }
                #[doc = "interface [SemanticVersion](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html)"]
                pub enum SemanticVersion {}
                unsafe impl ::java_spaghetti::ReferenceType for SemanticVersion {}
                unsafe impl ::java_spaghetti::JniType for SemanticVersion {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/SemanticVersion")
                    }
                }
                unsafe impl ::java_spaghetti::AssignableTo<Version> for SemanticVersion {}
                impl SemanticVersion {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/SemanticVersion"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                    #[doc = "[getVersionComponentCount](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html#getVersionComponentCount())"]
                    pub fn getVersionComponentCount<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        i32,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getVersionComponentCount",
                                        c"()I",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[getVersionComponent](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html#getVersionComponent(int))"]
                    pub fn getVersionComponent<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                        arg0: i32,
                    ) -> ::std::result::Result<
                        i32,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"getVersionComponent",
                                        c"(I)I",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[hasWildcard](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html#hasWildcard())"]
                    pub fn hasWildcard<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                    ) -> ::std::result::Result<
                        bool,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"hasWildcard",
                                        c"()Z",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_boolean_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "[compareTo](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html#compareTo(net.fabricmc.loader.api.SemanticVersion))"]
                    #[deprecated]
                    pub fn compareTo<'env>(
                        self: &::java_spaghetti::Ref<'env, Self>,
                        arg0: impl ::java_spaghetti::AsArg<SemanticVersion>,
                    ) -> ::std::result::Result<
                        i32,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [::java_spaghetti::AsJValue::as_jvalue(&arg0)];
                            let __jni_env = self.env();
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"compareTo",
                                        c"(Lnet/fabricmc/loader/api/SemanticVersion;)I",
                                    ))
                                })
                                .as_raw();
                            __jni_env.call_int_method_a(self.as_raw(), __jni_method, __jni_args.as_ptr())
                        }
                    }
                    #[doc = "public static final [COMPONENT_WILDCARD](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/SemanticVersion.html#COMPONENT_WILDCARD)"]
                    pub const COMPONENT_WILDCARD: i32 = -2147483648;
                }
                #[doc = "interface [Version](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/Version.html)"]
                pub enum Version {}
                unsafe impl ::java_spaghetti::ReferenceType for Version {}
                unsafe impl ::java_spaghetti::JniType for Version {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/Version")
                    }
                }
                impl Version {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/Version"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                }
                #[doc = "class [VersionParsingException](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/VersionParsingException.html)"]
                pub enum VersionParsingException {}
                unsafe impl ::java_spaghetti::ReferenceType for VersionParsingException {}
                unsafe impl ::java_spaghetti::JniType for VersionParsingException {
                    fn static_with_jni_type<R>(callback: impl FnOnce(&::std::ffi::CStr) -> R) -> R {
                        callback(c"net/fabricmc/loader/api/VersionParsingException")
                    }
                }
                impl VersionParsingException {
                    fn __class_global_ref(__jni_env: ::java_spaghetti::Env) -> ::java_spaghetti::sys::jobject {
                        static __CLASS: ::std::sync::OnceLock<
                            ::java_spaghetti::Global<super::super::super::super::java::lang::Object>,
                        > = ::std::sync::OnceLock::new();
                        __CLASS
                            .get_or_init(|| unsafe {
                                ::java_spaghetti::Local::from_raw(
                                    __jni_env,
                                    __jni_env.require_class(c"net/fabricmc/loader/api/VersionParsingException"),
                                )
                                .as_global()
                            })
                            .as_raw()
                    }
                    #[doc = "[VersionParsingException](https://maven.fabricmc.net/docs/fabric-loader-0.17.3/net/fabricmc/net/fabricmc/loader/api/VersionParsingException.html#VersionParsingException())"]
                    pub fn new<'env>(
                        __jni_env: ::java_spaghetti::Env<'env>,
                    ) -> ::std::result::Result<
                        ::java_spaghetti::Local<'env, Self>,
                        ::java_spaghetti::Local<'env, super::super::super::super::java::lang::Throwable>,
                    > {
                        static __METHOD: ::std::sync::OnceLock<::java_spaghetti::JMethodID> = ::std::sync::OnceLock::new();
                        unsafe {
                            let __jni_args = [];
                            let __jni_class = Self::__class_global_ref(__jni_env);
                            let __jni_method = __METHOD
                                .get_or_init(|| {
                                    ::java_spaghetti::JMethodID::from_raw(__jni_env.require_method(
                                        __jni_class,
                                        c"<init>",
                                        c"()V",
                                    ))
                                })
                                .as_raw();
                            __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
                        }
                    }
                }
            }
        }
    }
}
