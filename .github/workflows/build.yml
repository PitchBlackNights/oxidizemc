name: "Build Rust"
on:
  workflow_dispatch:
    inputs:
      profile:
        description: "Whether to build as dev (debug) or release"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - release

      platform:
        description: "What platform(s) to build to"
        required: false
        type: choice
        options:
          - "All"
          - "Windows-x86_64"
          - "Windows-aarch64"
          - "Linux-x86_64"
          - "Linux-aarch64"
          - "macOS-x86_64"
          - "macOS-aarch64"

      toolchain:
        description: "What rust toolchain to use"
        required: false
        default: "stable"
        type: string

env:
  ARTIFACT_CACHE_DIR: "artifact-cache"

jobs:
  pre-build-one:
    runs-on: ubuntu-latest
    name: "Pre-build configuration for `build-one`"
    if: inputs.platform != '' && inputs.platform != 'All'

    outputs:
      runs-on: ${{ steps.runs-on.outputs.out }}

    steps:
      - name: "Define `runs-on`"
        id: runs-on
        env:
          PLATFORM: ${{ inputs.platform }}
        run: |
          if [[ $PLATFORM = "Windows-x86_64" ]] || [[ $PLATFORM = "Windows-aarch64" ]]; then
            echo 'out=windows-latest' >> "$GITHUB_OUTPUT"
          elif [[ $PLATFORM = "Linux-x86_64" ]] || [[ $PLATFORM = "Linux-aarch64" ]]; then
            echo 'out=ubuntu-24.04' >> "$GITHUB_OUTPUT"
          elif [[ $PLATFORM = "macOS-x86_64" ]] || [[ $PLATFORM = "macOS-aarch64" ]]; then
            echo 'out=macOS-latest' >> "$GITHUB_OUTPUT"
          else
            echo Provided platform is not valid!
            echo PLATFORM = $PLATFORM
            exit 1
          fi
          cat "$GITHUB_OUTPUT"

  build-one:
    runs-on: ${{ needs.pre-build-one.outputs.runs-on }}
    name: "${{ inputs.platform }} with rust ${{ inputs.toolchain }}"
    needs: pre-build-one

    concurrency:
      group: "${{ github.workflow }}-${{ github.ref }}-build-one-${{ inputs.platform }}-${{ inputs.profile }}-${{ inputs.toolchain }}"
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
      - name: "Build"
        uses: ./.github/workflows/actions/build-helper
        with:
          platform: ${{ inputs.platform }}
          toolchain: ${{ inputs.toolchain }}
          profile: ${{ inputs.profile }}
          artifact-dir: ${{ env.ARTIFACT_CACHE_DIR }}

  build-all:
    runs-on: ${{ matrix.platform.runs-on }}
    name: "${{ matrix.platform.os-name }} with rust ${{ inputs.toolchain }}"
    if: inputs.platform == '' || inputs.platform == 'All'

    concurrency:
      group: "${{ github.workflow }}-${{ github.ref }}-build-all-${{ matrix.platform.os-name }}-${{ inputs.profile }}-${{ inputs.toolchain }}"
      cancel-in-progress: true

    strategy:
      fail-fast: true
      matrix:
        platform:
          - os-name: Windows-x86_64
            runs-on: windows-latest
          - os-name: Windows-aarch64
            runs-on: windows-latest
          - os-name: Linux-x86_64
            runs-on: ubuntu-24.04
          - os-name: Linux-aarch64
            runs-on: ubuntu-24.04
          - os-name: macOS-x86_64
            runs-on: macOS-latest
          - os-name: macOS-aarch64
            runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v4
      - name: "Build"
        uses: ./.github/workflows/actions/build-helper
        with:
          platform: ${{ matrix.platform.os-name }}
          toolchain: ${{ inputs.toolchain }}
          profile: ${{ inputs.profile }}
          artifact-dir: ${{ env.ARTIFACT_CACHE_DIR }}

  post-build:
    name: "Post-build"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build-one, build-all]
    permissions:
      actions: write

    steps:
      - uses: actions/checkout@v4

      # Create array of platform-specific cache keys
      - name: "Create platform cache keys"
        id: cache-keys
        run: |
          if [[ "${{ inputs.platform }}" != "" && "${{ inputs.platform }}" != "All" ]]; then
            echo 'keys=["artifact-cache-${{ inputs.platform }}-${{ github.run_id }}-${{ github.run_attempt }}"]' >> "$GITHUB_OUTPUT"
          else
            echo 'keys=["artifact-cache-Windows-x86_64-${{ github.run_id }}-${{ github.run_attempt }}", "artifact-cache-Windows-aarch64-${{ github.run_id }}-${{ github.run_attempt }}", "artifact-cache-Linux-x86_64-${{ github.run_id }}-${{ github.run_attempt }}", "artifact-cache-Linux-aarch64-${{ github.run_id }}-${{ github.run_attempt }}", "artifact-cache-macOS-x86_64-${{ github.run_id }}-${{ github.run_attempt }}", "artifact-cache-macOS-aarch64-${{ github.run_id }}-${{ github.run_attempt }}"]' >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      # Restore all platform caches
      - name: "Restore platform artifacts"
        uses: ./.github/workflows/actions/multi-cache-restore
        with:
          paths: "${{ env.ARTIFACT_CACHE_DIR }}"
          keys: "\"${{ join(fromJson(steps.cache-keys.outputs.keys), '\",\"') }}\""

      - name: "`ls **`"
        run: |
          ls **

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform || 'All' }}
          path: ${{ env.ARTIFACT_CACHE_DIR }}/
          if-no-files-found: error
        continue-on-error: true

      # Clean up all platform caches
      - name: "Cleanup platform caches"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for key in ${{ join(fromJson(steps.cache-keys.outputs.keys), ' ') }}; do
            gh cache delete "$key" || true
          done
        shell: bash
        continue-on-error: true
